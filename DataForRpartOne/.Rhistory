summary(tune)
model <- svm(Sex~., data=catstrain, method="C-classification", kernel="linear", probability=T, gamma=0.1, cost=10)
prediction <-predict(model, catstest, probability=T)
table(catstest$Sex, prediction)
plot(model, cats)
model <- svm(Sex~., data=catstrain, method="C-classification", kernel="radial", probability=T, gamma=0.1, cost=10)
prediction <-predict(model, catstest, probability=T)
table(catstest$Sex, prediction)
plot(model, cats)
library(e1071)
library(MASS)
data(cats)
catsData <- cats
set.seed(224599)
ind <- sample(2, nrow(catsData), replace=TRUE, prob=c(0.7, 0.3))
catstrain <- catsData[ind==1,]
catstest <- catsData[ind==2,]
tune <- tune.svm(Sex~., data=catstrain, gamma=10^(-6:-1), cost=10^(1:4))
summary(tune)
model <- svm(Sex~., data=catstrain, method="C-classification", kernel="linear", probability=T, gamma=0.1, cost=10)
prediction <-predict(model, catstest, probability=T)
table(catstest$Sex, prediction)
plot(model, cats)
library(magick)
install.packages("magick")
library(magick)
str(magick::magick_config())
image_read(path, density = NULL, depth = NULL, strip = FALSE)
image_write(image, path = NULL, format = NULL, quality = NULL,
depth = NULL, density = NULL, comment = NULL, flatten = FALSE)
image_convert(image, format = NULL, type = NULL, colorspace = NULL,
depth = NULL, antialias = NULL)
frink <- image_read("https://jeroen.github.io/images/frink.png")
print(frink)
# Shows some meta data about the image
image_info(frink)
# Render png to jpeg
image_write(frink, path = "H:\\R-Data\frink.jpg", format = "jpeg", quality = 75)
# Render png to jpeg
image_write(frink, path = "H://R-Data/frink.jpg", format = "jpeg", quality = 75)
frink_jpeg <- image_convert(frink, "jpeg")
image_info(frink_jpeg)
# Add 20px left/right and 10px top/bottom
image_border(image_background(frink, "hotpink"), "#000080", "20x10")
image_trim(frink)
image_crop(frink, "100x150+50")
# Width: 300px
image_scale(frink, "300")
# Height: 300px
image_scale(frink, "x300")
image_rotate(frink, 45)
image_flip(frink)
image_flop(frink)
image_rotate(frink, 45)
image_flip(frink)
image_flop(frink)
# Change the brightness, the saturation and the Hue
image_modulate(frink, brightness = 80, saturation = 120, hue = 90)
# Paint the shirt in blue
image_fill(frink, "blue", point = "+100+200", fuzz = 20)
# Add some text
image_annotate(
frink, text = "I like R!", size = 70, color = "green",
gravity = "southwest"
)
# Customize text
image_annotate(
frink, text = "CONFIDENTIAL", size = 30,
color = "red", boxcolor = "pink",
degrees = 60, location = "+50+100",
font = "Times"
)
bigdata <- image_read('https://jeroen.github.io/images/bigdata.jpg')
frink <- image_read("https://jeroen.github.io/images/frink.png")
logo <- image_read("https://jeroen.github.io/images/Rlogo.png")
img <- c(bigdata, logo, frink)
img <- image_scale(img, "300x300")
image_info(img)
# Prints images on top of one another
image_mosaic(img)
# Create a single image which has the size of the first image
image_flatten(img)
# Adding images
image_flatten(img, 'Add')
# Modulate images
image_flatten(img, 'Modulate')
# Minus
image_flatten(img, 'Minus')
image_append(image_scale(img, "x200"))
image_append(image_scale(img, "100"), stack = TRUE)
bigdatafrink <- image_scale(image_rotate(image_background(frink, "none"), 300), "x200")
image_composite(image_scale(bigdata, "x400"), bigdatafrink, offset = "+180+100")
image_animate(image_scale(img, "200x200"), fps = 1, dispose = "previous")
newlogo <- image_scale(image_read("https://jeroen.github.io/images/Rlogo.png"))
oldlogo <- image_scale(image_read("https://developer.r-project.org/Logo/Rlogo-3.png"))
image_resize(c(oldlogo, newlogo), '200x150!') %>%
image_background('white') %>%
image_morph() %>%
image_animate()
library(magick)
str(magick::magick_config())
frink <- image_read("https://jeroen.github.io/images/frink.png")
print(frink)
frink <- image_read("https://jeroen.github.io/images/frink.png")
print(frink)
frink_jpeg <- image_convert(frink, "jpeg")
image_info(frink_jpeg)
# Add 20px left/right and 10px top/bottom
image_border(image_background(frink, "hotpink"), "#000080", "20x10")
image_trim(frink)
# Add 20px left/right and 10px top/bottom
image_border(image_background(frink, "hotpink"), "#000080", "20x10")
image_trim(frink)
image_crop(frink, "100x150+50")
# Width: 300px
image_scale(frink, "300")
# Height: 300px
image_scale(frink, "x300")
image_rotate(frink, 45)
image_flip(frink)
image_flop(frink)
# Change the brightness, the saturation and the Hue
image_modulate(frink, brightness = 80, saturation = 120, hue = 90)
# Paint the shirt in blue
image_fill(frink, "blue", point = "+100+200", fuzz = 20)
# Add some text
image_annotate(
frink, text = "I like R!", size = 70, color = "green",
gravity = "southwest"
)
# Customize text
image_annotate(
frink, text = "CONFIDENTIAL", size = 30,
color = "red", boxcolor = "pink",
degrees = 60, location = "+50+100",
font = "Times"
)
# Prints images on top of one another
image_mosaic(img)
# Create a single image which has the size of the first image
image_flatten(img)
# Adding images
image_flatten(img, 'Add')
# Modulate images
image_flatten(img, 'Modulate')
# Minus
image_flatten(img, 'Minus')
image_append(image_scale(img, "x200"))
image_append(image_scale(img, "100"), stack = TRUE)
bigdatafrink <- image_scale(image_rotate(image_background(frink, "none"), 300), "x200")
image_composite(image_scale(bigdata, "x400"), bigdatafrink, offset = "+180+100")
image_animate(image_scale(img, "200x200"), fps = 1, dispose = "previous")
mygif = image_animate(image_scale(img, "200x200"), fps = 1, dispose = "previous")
image_write(mygif, path = "H://R-Data/mygif.jpg", format = "jpeg", quality = 75)
image_write(mygif, path = "H://R-Data/mygif.gif", format = "jpeg", quality = 75)
mygif = image_animate(image_scale(img, "200x200"), fps = 1, dispose = "previous")
image_write(mygif, path = "H://R-Data/mygif.gif", format = "gif", quality = 75)
newlogo <- image_scale(image_read("https://jeroen.github.io/images/Rlogo.png"))
oldlogo <- image_scale(image_read("https://developer.r-project.org/Logo/Rlogo-3.png"))
image_resize(c(oldlogo, newlogo), '200x150!') %>%
image_background('white') %>%
image_morph() %>%
image_animate()
frink <- image_read("H://R-Data/frink.jpg", density = NULL, depth = NULL, strip = FALSE)
print(frink)
frink <- image_read("https://jeroen.github.io/images/frink.png")
print(frink)
image_write(frink, path = "H://R-Data/frink.png", format = "PNG", quality = 75)
image_write(frink, path = "H://R-Data/frink.png", format = "PNG", quality = 75)
frink <- image_read("H://R-Data/frink.png", density = NULL, depth = NULL, strip = FALSE)
print(frink)
frink <- image_read("H://R-Data/frink.png", density = NULL, depth = NULL, strip = FALSE)
print(frink)
library(devtools)
devtools::install_github("tpq/eek")
library(eek)
ekg <- new("eek", file = "data-raw/qtdb/sel16265-phys.txt", channel = 1)
ekg$filter()
ekg <- new("eek", file = "H://R-Data/sel16265-phys.txt", channel = 1)
ekg$filter()
ekg <- new("eek", file = "H://R-Data/sel16265-phys.txt", channel = 1)
View(ekg)
ekg
library(devtools)
devtools::install_github("tpq/eek")
library(eek)
ekg <- new("eek", file = "H://R-Data/sel16265-phys.txt", channel = 1)
head(ekg$dat)
ekg$filter()
install.packages("signal")
ekg$filter()
head(ekg$dat)
ekg$qplot(1:1000)
ekg$getR()
head(ekg$R)
ekg$getR()
install.packages("pracma")
library(pracma)
ekg$getR()
head(ekg$R)
ekg$getPT()
ekg$getPT()
ekg$getQS()
ekg$qplot(1:1000)
head(ekg$dat)
ekg$qplot(1:1000)
ekg$qplot(1:1000)
ibrary(devtools)
devtools::install_github("tpq/eek")
library(eek)
library(signal)
ekg <- new("eek", file = "H://R-Data/sel16265-phys.txt", channel = 1)
ekg$filter()
head(ekg$dat)
ekg$qplot(1:1000)
library(devtools)
devtools::install_github("tpq/eek")
library(eek)
library(signal)
ekg <- new("eek", file = "H://R-Data/sel16265-phys.txt", channel = 1)
ekg$filter()
head(ekg$dat)
ekg$qplot(1:1000)
ekg$qplot(1:1000)
ekg$qplot(1:100)
ekg$qplot(1:10000)
ekg$qplot(1000:2000)
ekg$qplot(1:2000)
ekg$qplot(1000:2000)
ekg$qplot(1:2000)
library(pracma)
ekg$getR()
head(ekg$R)
ekg$getPT()
ekg$getQS()
ekg$qplot(1:1000)
colonData <- read.table("H:/R-Data/colon.csv", header=TRUE, sep=",")
#Select only interesting column and specific factor
datasvm <- colonData[c("Class","T62947","H64807")]
datasvm$Class <- factor(datasvm$Class)
#Splitiing data 30% as test / 70% as training
set.seed(25)
ind <- sample(2, nrow(datasvm), replace=TRUE, prob=c(0.7, 0.3))
datatrain <- datasvm[ind==1,]
colontest <- datasvm[ind==2,]
#SVM
library(e1071)
#finding best gamma and cost
tune <- tune.svm(Class~., data = datatrain, gamma=10^(-5:-1), cost=10^(-3:4))
summary(tune)
#create model using gamma 0.1 and cost 1 from tune
model <- svm(Class~., data = datatrain, method="C-classification", kernel="radial", probability=T, gamma=0.1, cost=1)
print(model)
#prediction using test data
prediction <- predict(model, datatest, proability=T)
table(datatest$Class, prediction)
plot(model, datasvm)
#Select only interesting column and specific factor
datasvm <- colonData[c("Class","T62947","H64807")]
datasvm$Class <- factor(datasvm$Class)
#Splitiing data 30% as test / 70% as training
set.seed(25)
ind <- sample(2, nrow(datasvm), replace=TRUE, prob=c(0.7, 0.3))
datatrain <- datasvm[ind==1,]
datatest <- datasvm[ind==2,]
#SVM
library(e1071)
#finding best gamma and cost
tune <- tune.svm(Class~., data = datatrain, gamma=10^(-5:-1), cost=10^(-3:4))
summary(tune)
#create model using gamma 0.1 and cost 1 from tune
model <- svm(Class~., data = datatrain, method="C-classification", kernel="radial", probability=T, gamma=0.1, cost=1)
print(model)
#prediction using test data
prediction <- predict(model, datatest, proability=T)
table(datatest$Class, prediction)
plot(model, datasvm)
library(magick)
str(magick::magick_config())
#image_read(path, density = NULL, depth = NULL, strip = FALSE)
#image_write(image, path = NULL, format = NULL, quality = NULL,
#depth = NULL, density = NULL, comment = NULL, flatten = FALSE)
#image_convert(image, format = NULL, type = NULL, colorspace = NULL,
#depth = NULL, antialias = NULL)
frink <- image_read("https://jeroen.github.io/images/frink.png")
print(frink)
frink <- image_read("H://R-Data/frink.png", density = NULL, depth = NULL, strip = FALSE)
print(frink)
# Shows some meta data about the image
image_info(frink)
# Render png to jpeg
image_write(frink, path = "H://R-Data/frink.jpg", format = "jpeg", quality = 75)
image_write(frink, path = "H://R-Data/frink.png", format = "PNG", quality = 75)
frink_jpeg <- image_convert(frink, "jpeg")
image_info(frink_jpeg)
# Add 20px left/right and 10px top/bottom
image_border(image_background(frink, "hotpink"), "#000080", "20x10")
image_trim(frink)
image_crop(frink, "100x150+50")
# Width: 300px
image_scale(frink, "300")
# Height: 300px
image_scale(frink, "x300")
image_rotate(frink, 45)
image_flip(frink)
image_flop(frink)
# Change the brightness, the saturation and the Hue
image_modulate(frink, brightness = 80, saturation = 120, hue = 90)
# Paint the shirt in blue
image_fill(frink, "blue", point = "+100+200", fuzz = 20)
# Add some text
image_annotate(
frink, text = "I like R!", size = 70, color = "green",
gravity = "southwest"
)
# Customize text
image_annotate(
frink, text = "CONFIDENTIAL", size = 30,
color = "red", boxcolor = "pink",
degrees = 60, location = "+50+100",
font = "Times"
)
bigdata <- image_read('https://jeroen.github.io/images/bigdata.jpg')
frink <- image_read("https://jeroen.github.io/images/frink.png")
logo <- image_read("https://jeroen.github.io/images/Rlogo.png")
img <- c(bigdata, logo, frink)
img <- image_scale(img, "300x300")
image_info(img)
# Prints images on top of one another
image_mosaic(img)
# Create a single image which has the size of the first image
image_flatten(img)
# Adding images
image_flatten(img, 'Add')
# Modulate images
image_flatten(img, 'Modulate')
# Minus
image_flatten(img, 'Minus')
image_append(image_scale(img, "x200"))
image_append(image_scale(img, "100"), stack = TRUE)
bigdatafrink <- image_scale(image_rotate(image_background(frink, "none"), 300), "x200")
image_composite(image_scale(bigdata, "x400"), bigdatafrink, offset = "+180+100")
mygif = image_animate(image_scale(img, "200x200"), fps = 1, dispose = "previous")
image_write(mygif, path = "H://R-Data/mygif.gif", format = "gif", quality = 75)
newlogo <- image_scale(image_read("https://jeroen.github.io/images/Rlogo.png"))
oldlogo <- image_scale(image_read("https://developer.r-project.org/Logo/Rlogo-3.png"))
image_resize(c(oldlogo, newlogo), '200x150!') %>%
image_background('white') %>%
image_morph() %>%
image_animate()
library(e1071)
library(MASS)
library(caret)
getwd()
setwd("H:/R-Data/DataForRpartOne")
getwd()
setwd("H:/R-Data/DataForRpartOne")
colon <- read.table("colon.csv", header=TRUE, sep =",")
colonData <- subset(colon, select=c("Class","T62947", "H64807"))
colonData$Class <- as.factor(as.character(colonData$Class))
str(colonData$Class)
set.seed(11)
ind <- sample(2, nrow(colonData), replace=TRUE,
prob=c(0.7,0.3))
colonDatatrain <- colonData[ind==1,]
colonDatatest <- colonData[ind==2,]
#find best gamma and cost parameters
tune <- tune.svm(Class~., data = colonDatatrain,
gamma=10^(-6:-1),
cost=10^(1:4))
summary(tune)
tune2 <- tune.svm(Class~., data = colonDatatrain,
gamma=10^(-5:-1),
cost=10^(-3:4))
summary(tune2)
model <- svm(Class~., data=colonDatatrain, method="C-classification",
kernel = "linear", probability = T, gamma = 0.1, cost = 1000)
print(model)
#evaluate the model by:
#prediction using test data
prediction <- predict(model, colonDatatest, probability=T)
table(colonDatatest$Class, prediction)
plot(model, colonData)
confusionMatrix(colonDatatrain$Class, predict(model))
confusionMatrix(colonDatatest$Class, prediction)
tune <- tune.svm(Class~., data = colonDatatrain,
gamma=10^(-6:-1),
cost=10^(1:4))
summary(tune)
set.seed(11)
ind <- sample(2, nrow(colonData), replace=TRUE,
prob=c(0.7,0.3))
colonDatatrain <- colonData[ind==1,]
colonDatatest <- colonData[ind==2,]
#find best gamma and cost parameters
tune <- tune.svm(Class~., data = colonDatatrain,
gamma=10^(-6:-1),
cost=10^(1:4))
summary(tune)
tune2 <- tune.svm(Class~., data = colonDatatrain,
gamma=10^(-5:-1),
cost=10^(-3:4))
summary(tune2)
prediction <- predict(model, colonDatatest, probability=T)
table(colonDatatest$Class, prediction)
plot(model, colonData)
confusionMatrix(colonDatatrain$Class, predict(model))
confusionMatrix(colonDatatest$Class, prediction)
library(e1071)
library(MASS)
library(caret)
library(e1071)
library(caTools)
colon <- read.csv("H:/R-Data/colon.csv", header=TRUE, stringsAsFactors=FALSE, strip.white = TRUE)
dataset <- data.frame(colon$T62947,colon$H64807, colon$Class)
set.seed(123)
split = sample.split(dataset$colon.Class, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
classifier = svm(formula = colon.Class ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
y_pred = predict(classifier, newdata = test_set[])
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('colon.T62947', 'colon.H64807')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Training set)',
xlab = 'T62947', ylab = 'H64807',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'coral1', 'aquamarine'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
colon <- read.csv("H:/R-Data/colon.csv", header=TRUE, stringsAsFactors=FALSE, strip.white = TRUE)
dataset <- data.frame(colon$T62947,colon$H64807, colon$Class)
set.seed(123)
split = sample.split(dataset$colon.Class, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
classifier = svm(formula = colon.Class ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
y_pred = predict(classifier, newdata = test_set[])
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('colon.T62947', 'colon.H64807')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Training set)',
xlab = 'T62947', ylab = 'H64807',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'coral1', 'aquamarine'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
library(neuralnet)
data <- read.csv("H:/R-Data/colon.csv", header=TRUE, stringsAsFactors=FALSE, strip.white = TRUE)
samplesize = 0.60 * nrow(data)
set.seed(80)
index = sample( seq_len ( nrow ( data ) ), size = samplesize )
datatrain = data[ index, ]
datatest = data[ -index, ]
max = apply(data , 2 , max)
min = apply(data, 2 , min)
scaled = as.data.frame(scale(data, center = min, scale = max - min))
trainNN = scaled[index , ]
testNN = scaled[-index , ]
set.seed(2)
NN = neuralnet(Class ~. , trainNN, hidden = 3 , linear.output = T )
predict_testNN = compute(NN, testNN)
predict_testNN = (predict_testNN$net.result * (max(colon$Class) - min(colon$Class))) + min(colon$Class)
RMSE.NN = (sum((testNN$Class - predict_testNN)^2) / nrow(datatest)) ^ 0.5
library(neuralnet)
data <- read.csv("H:/R-Data/colon.csv", header=TRUE, stringsAsFactors=FALSE, strip.white = TRUE)
samplesize = 0.60 * nrow(data)
set.seed(80)
index = sample( seq_len ( nrow ( data ) ), size = samplesize )
datatrain = data[ index, ]
datatest = data[ -index, ]
max = apply(data , 2 , max)
min = apply(data, 2 , min)
scaled = as.data.frame(scale(data, center = min, scale = max - min))
trainNN = scaled[index , ]
testNN = scaled[-index , ]
set.seed(2)
NN = neuralnet(Class ~. , trainNN, hidden = 3 , linear.output = T )
library(neuralnet)
data <- read.csv("H:/R-Data/colon.csv", header=TRUE, stringsAsFactors=FALSE, strip.white = TRUE)
samplesize = 0.60 * nrow(data)
set.seed(80)
index = sample( seq_len ( nrow ( data ) ), size = samplesize )
datatrain = data[ index, ]
datatest = data[ -index, ]
max = apply(data , 2 , max)
min = apply(data, 2 , min)
scaled = as.data.frame(scale(data, center = min, scale = max - min))
trainNN = scaled[index , ]
testNN = scaled[-index , ]
set.seed(2)
NN = neuralnet(Class ~. , trainNN, hidden = 3 , linear.output = T )
NN = neuralnet(Class ~. , trainNN, hidden = 3 , linear.output = T )
NN = neuralnet(Class ~. , data=trainNN, hidden = 3 , linear.output = T )
